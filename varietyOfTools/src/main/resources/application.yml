server:
  port: 8378
  #自定义异常
  error:
    include-exception: true
    include-message: always
#mybatis
mybatis-plus:
  # xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）
  mapper-locations: classpath:com/doubleskyline/gkly/qbzb/mapper/*.xml
  #  定义所有操作类的别名所在包
  typeAliasesPackage: com.doubleskyline.gkly.qbzb.entity
  # 以下配置均有默认值,可以不设置
  global-config:
    #数据库相关配置
    db-config:
      #主键类型  AUTO:"数据库ID自增", INPUT:"用户输入ID", ID_WORKER:"全局唯一ID (数字类型唯一ID)", UUID:"全局唯一ID UUID";
      id-type: AUTO
      #字段策略 IGNORED:"忽略判断",NOT_NULL:"非 NULL 判断"),NOT_EMPTY:"非空判断"
      field-strategy: NOT_EMPTY
      #驼峰下划线转换
      column-underline: true
      # 逻辑已删除值(默认为 1)
      logic-delete-value: -1
      # 逻辑未删除值(默认为 0)
      logic-not-delete-value: 0
    #禁用掉启动时控制台打印mybatisPlus的banner
    banner: false
  #原生配置
  configuration:
    # 是否开启自动驼峰命名规则映射:从数据库列名到Java属性驼峰命名的类似映射
    map-underscore-to-camel-case: true
    cache-enabled: false
    # 如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段
    call-setters-on-nulls: true
    jdbc-type-for-null: 'null'
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mybatis-refresh:
    #是否开启刷新线程
    enabled: true
    #延迟启动刷新程序的秒数
    delaySeconds: 60
    #刷新扫描间隔的时长秒数
    sleepSeconds: 3
  sql-analyse: # SQL执行效率分析
    show: true
    format: true

spring:
  datasource:
    #配置MySQL数据源
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/boothello?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai
    username: root
#    password: mingxy925871
    password: 123456
  #配置jpa自动建表
  jpa:
    hibernate:
      ddl-auto: update #第一次建表create  后面用update，要不然每次重启都会新建表
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    show-sql: true #执行命令时是否打印sql
  #配置文件上传大小限制
  servlet:
    multipart:
      max-file-size: 10240MB
      max-request-size: 10240MB
  # 配置mongo数据库
  data:
    mongodb:
      host: 127.0.0.1
      port: 27017
      authentication-database: test
      database: test
      username: blog
      password: blog123456
    #      uri: mongodb://127.0.0.1:27017/test #如果密码中含有特殊字符，需要自行查询下特殊字符url的编码，否则编译不通过。
    #-------- 设置了密码的MongoDB配置方式 -------
    # MongoDB服务器连接地址
    #spring.data.mongodb.host=127.0.0.1
    # MongoDB服务器连接端口
    #spring.data.mongodb.port=27017
    # MongoDB的验证数据库
    #spring.data.mongodb.authentication-database=admin #认证的库，因为账号密码信息在admin库里
    # MongoDB数据库用户
    #spring.data.mongodb.username=root
    # MongoDB数据库密码
    #spring.data.mongodb.password=123456
    # 带连接的数据库
    #spring.data.mongodb.database=testMongoDB #如果密码第一位是*，yml文件不支持。需要加单引号,password是用char[]接收的，如果你的密码是纯数字也需要加单引号。
    #    原文链接：https://blog.csdn.net/a1120467800/article/details/109954145
  #springboot启动加载log图形位置
  banner:
    location: banner/banner.txt
  main:
    # springboot项目-启动logo开关控制。
    banner-mode: console
  #控制台色彩打印
  output:
    ansi:
      enabled:
        ALWAYS
  # 发送邮件相关
  mail:
    host: smtp.163.com #SMTP服务器地址
    username: Mxiang_yu@163.com #登陆账号
    password: RFGILJFAOWHQKULI #写邮箱的授权码！！
    properties:
      from: Mxiang_yu@163.com #邮件发信人（即真实邮箱）

#配置日志文件相关
#logging:
#  config: classpath:logback/logback.xml
#  file:
#    path: log
#  level: debug

# 秘钥
jasypt:
  encryptor:
    password: algorithm

# 监控配置
management:
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  # 开启监控所有项
  endpoints:
    web:
      exposure:
        include: '*'
  metrics:
    export:
      prometheus:
        enabled: true