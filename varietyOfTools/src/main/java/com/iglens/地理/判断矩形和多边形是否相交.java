package com.iglens.地理;

import java.awt.Polygon;
import java.awt.Rectangle;

public class 判断矩形和多边形是否相交 {

  public static void main(String[] args) {
    String polygonStr =
        "121.61386835500014 21.953497415000072,\n"
            + "121.61422614500009 21.951204350000182,\n"
            + "121.61429213000008 21.950781459999973,\n"
            + "121.61442917000011 21.948145870000076,\n"
            + "121.61413190000019 21.947396725000146,\n"
            + "121.61406981000005 21.947240250000107,\n"
            + "121.61360505500022 21.946068995000076,\n"
            + "121.61349228500012 21.945939250000094,\n"
            + "121.61338809500035 21.945840274999966,\n"
            + "121.6082999050002 21.944399225000097,\n"
            + "121.60777098000005 21.944439565000096,\n"
            + "121.60749331000011 21.944582895000053,\n"
            + "121.60735998500002 21.944705035000027,\n"
            + "121.60714095000014 21.944994544999986,\n"
            + "121.60681337500012 21.945327960000157,\n"
            + "121.60660602000007 21.945651180000084,\n"
            + "121.60653144000014 21.945908295000095,\n"
            + "121.60628821500018 21.94827565000014,\n"
            + "121.60621052500017 21.948500720000084,\n"
            + "121.60603930000013 21.948988645000043,\n"
            + "121.605809195 21.949360500000182,\n"
            + "121.6055966150002 21.949523025000076,\n"
            + "121.60528706000002 21.949704595000128,\n"
            + "121.60503610500018 21.94983248000017,\n"
            + "121.60485308500006 21.949941084999978,\n"
            + "121.6046982150001 21.950140215000147,\n"
            + "121.6046411000001 21.950240855000118,\n"
            + "121.60440702500011 21.950652950000006,\n"
            + "121.60390908000022 21.95120903500009,\n"
            + "121.60363045500003 21.95154680500019,\n"
            + "121.6035041250002 21.95169933000011,\n"
            + "121.60336104000021 21.95188050000013,\n"
            + "121.60335074500017 21.951943620000065,\n"
            + "121.60338973500018 21.952113700000098,\n"
            + "121.60345862000008 21.952195544999995,\n"
            + "121.60362298500013 21.952411835000134,\n"
            + "121.60370933000002 21.95249087000002,\n"
            + "121.60383501500007 21.952642810000157,\n"
            + "121.60419427000022 21.952757930000075,\n"
            + "121.60443396000016 21.952815995000037,\n"
            + "121.60481757000025 21.952897700000108,\n"
            + "121.60559877000003 21.95285950500005,\n"
            + "121.6057459750001 21.952865074999977,\n"
            + "121.6059588400002 21.952872300000138,\n"
            + "121.61123987500002 21.954599455000164,\n"
            + "121.6119837450002 21.9546953950001,\n"
            + "121.61270402500008 21.954746305000015,\n"
            + "121.61325463000003 21.95448606000008,\n"
            + "121.61379333000002 21.95397823000019,\n"
            + "121.61386835500014 21.953497415000072";

    String[] points = polygonStr.split(",");

    int[] xpoints = new int[points.length];
    int[] ypoints = new int[points.length];

    for (int i = 0; i < points.length; i++) {
      String[] xy = points[i].trim().split(" ");
      double v = Double.parseDouble(xy[0]);
      double z = Double.parseDouble(xy[1]);
      xpoints[i] = (int) v;
      ypoints[i] =  (int) z;
    }

    Polygon polygon = new Polygon(xpoints, ypoints, xpoints.length);

    Rectangle rectangle = new Rectangle(7, 15, 9, 17);

    boolean intersects = intersect(rectangle, polygon);

    System.out.println(intersects);
  }

  public static boolean intersect(Rectangle r, Polygon p) {

    // 判断边界框是否重叠
    if (!r.intersects(p.getBounds())) {
      return false;
    }

    // 判断多边形顶点是否在矩形内
    for (int i = 0; i < p.npoints; i++) {
      if (r.contains(p.xpoints[i], p.ypoints[i])) {
        return true;
      }
    }

    // 判断矩形顶点是否在多边形内
    if (p.contains(r.x, r.y)
        || p.contains(r.x + r.width, r.y)
        || p.contains(r.x, r.y + r.height)
        || p.contains(r.x + r.width, r.y + r.height)) {
      return true;
    }

    return false;
  }
}
